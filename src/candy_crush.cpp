// 723. Candy Crush

#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

class Solution 
{
public:
    vector<vector<int>> candyCrush(vector<vector<int>>& board) 
    {
        vector<vector<int>> crushBoard = board;
        const int m = board.size(), n = board[0].size();
        cout << "\nInput: \n";
        disp(board);
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n - 2; ++j)
            {
                if (board[i][j] == board[i][j + 1] && board[i][j] == board[i][j + 2])
                {
                    crushBoard[i][j] = -1;
                    crushBoard[i][j + 1] = -1;
                    crushBoard[i][j + 2] = -1;
                }
            }
        }
        
        for (int j = 0; j < n; ++j)
        {
            for (int i = 0; i < m - 2; ++i)
            {
                if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j])
                {
                    crushBoard[i][j] = -1;
                    crushBoard[i + 1][j] = -1;
                    crushBoard[i + 2][j] = -1;
                }
            }
        }
        
        for (int j = 0; j < n; ++j)
        {
            vector<int> crushCnt(m, 0);
            for (int i = m - 1; i >= 0; --i)
            {
                if (crushBoard[i][j] == -1)
                {
                    crushCnt[i] = i == m - 1 ? 1 : crushCnt[i + 1] + 1;
                }
                else
                {
                    crushCnt[i] = i == m - 1 ? 0 : crushCnt[i + 1] + 0;
                }
            }
            
            for (int i = m - 1; i >= 0; --i)
            {
                if (crushBoard[i][j] != -1) crushBoard[i + crushCnt[i]][j] = crushBoard[i][j];
            }
            
            int numInitialZeros = crushCnt[0];
            for (int k = 0; k < numInitialZeros; ++k) crushBoard[k][j] = 0;
        }
        
        cout << "\nOutput: \n";
        disp(crushBoard);
        
        return board == crushBoard ? crushBoard : candyCrush(crushBoard);
    }
    
private:
    void disp(vector<vector<int>> board)
    {
        const int m = board.size(), n = board[0].size();
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                cout << board[i][j] << "\t";
            }
            cout << "\n";
        }
    }
};


int main()
{
    vector<vector<int>> board({{110,5,112,113,114},{210,211,5,213,214},{310,311,3,313,314},{410,411,412,5,414},{5,1,512,3,3},{610,4,1,613,614},{710,1,2,713,714},{810,1,2,1,1},{1,1,2,2,2},{4,1,4,4,1014}});
    
    //vector<vector<int>> board({{1,4,3,5,4,4,1,2,1,4,5,2,5,2,2,2,1,1,5,2,1,3,1,4,2,5,4,5,3,5,3,4,5,3,5,1,1,3,5,3,5,2,1,2,2,3,5,5,2,3},{1,3,4,3,1,2,1,1,3,4,3,3,3,1,2,1,3,2,2,4,2,1,4,1,3,4,3,1,4,2,2,2,3,5,3,2,3,5,3,2,4,2,4,3,1,1,1,3,2,5},{4,4,1,3,3,4,3,2,1,4,4,1,1,5,1,3,4,1,1,3,1,3,3,1,3,4,1,3,5,2,1,2,5,4,3,2,1,4,1,3,5,3,4,1,2,1,5,5,2,3},{4,1,5,5,3,3,2,5,2,3,1,1,5,3,4,5,5,2,4,2,2,2,1,2,2,2,5,4,4,2,4,2,1,5,3,2,5,4,5,5,5,1,2,4,5,3,4,4,3,5},{2,5,5,5,1,5,5,5,3,2,5,2,2,4,1,3,4,1,3,5,2,1,4,2,4,3,4,3,1,3,3,1,3,5,1,1,4,2,2,5,2,1,3,4,5,1,2,1,1,2},{4,2,4,3,2,4,4,4,5,3,1,1,2,4,1,1,4,5,5,4,4,3,4,5,5,3,3,5,1,2,2,1,4,2,3,1,2,1,1,2,3,4,3,4,4,5,2,3,4,2},{2,1,2,1,2,3,3,4,3,5,5,2,3,5,2,4,4,4,5,1,5,1,1,2,2,2,5,3,3,4,5,2,2,1,3,2,4,2,2,3,1,3,3,2,5,5,2,2,3,1},{1,4,2,5,3,5,4,1,3,5,2,2,1,4,3,2,5,2,5,4,5,3,3,5,2,3,2,4,3,2,3,1,3,5,1,5,5,1,1,4,1,2,1,3,5,3,2,4,3,1},{2,2,3,5,4,4,2,1,3,4,2,3,5,2,5,4,2,5,1,1,1,2,5,1,3,3,5,3,2,2,3,1,5,3,1,2,1,4,2,1,2,3,2,4,1,3,1,3,5,2},{3,5,1,5,3,2,3,3,3,5,2,1,4,5,4,4,4,2,4,1,4,1,2,5,1,5,3,4,3,5,5,2,4,3,1,5,3,4,3,3,3,5,5,2,3,4,1,5,2,5},{2,5,2,4,4,2,3,1,1,5,1,1,2,4,5,3,3,1,2,4,4,3,2,5,1,1,1,3,2,4,2,5,4,4,3,3,3,1,4,3,4,1,2,2,5,3,5,1,1,1},{4,5,1,3,1,3,1,3,2,1,3,3,5,5,5,3,2,3,1,2,4,4,1,3,4,2,3,4,4,3,5,4,3,1,1,2,4,1,2,4,2,4,4,4,1,5,4,2,2,4},{2,4,5,2,4,2,3,5,4,1,5,5,4,4,4,4,3,4,3,4,2,3,5,2,4,2,2,4,5,2,3,4,5,5,3,2,1,4,1,4,1,4,5,4,4,2,5,5,3,1},{2,3,5,2,3,5,3,5,3,2,1,5,3,5,5,5,1,2,1,2,4,3,3,3,1,3,4,2,5,4,4,3,2,4,3,3,2,3,3,2,3,2,4,4,3,2,5,2,1,5},{1,4,4,5,5,4,4,5,5,1,4,2,1,3,1,1,2,2,3,3,2,4,5,3,1,3,4,3,5,5,1,2,2,3,3,3,1,5,3,5,2,1,4,4,1,3,1,5,2,3},{1,4,3,2,5,4,4,4,3,5,3,4,4,2,5,3,1,5,1,5,1,1,1,5,5,5,5,2,3,4,3,2,1,2,2,2,3,2,1,3,4,3,3,4,4,1,5,3,2,4},{5,5,1,2,4,5,2,2,5,1,5,4,4,5,3,4,3,4,5,3,4,1,3,3,3,4,4,1,4,3,4,1,3,2,1,1,3,3,2,2,3,1,3,4,4,1,5,3,4,3},{2,4,4,2,4,3,5,1,4,4,5,3,4,4,3,2,1,1,2,5,2,2,3,2,1,1,1,5,4,1,1,2,3,5,5,4,5,4,1,2,1,3,4,3,3,5,3,5,3,1},{3,5,1,5,5,4,4,3,3,2,5,2,2,2,4,1,5,4,4,5,5,3,4,2,2,5,2,4,4,3,2,5,4,5,3,2,4,2,2,5,1,1,5,2,1,1,4,1,1,3},{2,1,1,2,3,2,4,3,2,2,5,3,2,4,3,3,3,4,4,2,3,3,5,3,4,5,1,4,5,5,2,1,2,3,1,1,2,2,4,1,2,2,5,4,3,5,3,5,1,3},{5,4,1,3,3,3,5,5,5,5,2,4,3,2,1,3,5,5,3,5,2,3,3,5,3,3,4,1,2,1,4,5,2,2,3,3,4,1,4,1,1,1,5,5,4,5,2,3,3,5},{4,2,5,4,4,1,2,4,2,3,5,1,2,2,5,1,3,5,5,3,5,5,1,3,2,1,1,5,1,4,2,5,2,1,3,4,4,4,5,1,3,2,1,3,4,1,5,2,4,2},{3,5,4,3,1,1,3,2,3,2,1,2,1,5,1,2,3,1,4,4,5,5,5,3,5,4,5,2,3,5,2,5,3,1,1,4,2,5,2,2,5,3,1,3,1,4,1,5,1,5},{5,2,1,5,1,5,3,1,4,1,2,4,4,2,4,5,4,3,1,1,2,3,4,3,2,1,3,4,5,3,4,2,5,5,4,3,2,2,5,1,4,3,4,3,3,2,2,5,5,5},{1,3,2,5,2,2,1,3,3,2,5,3,5,4,4,3,2,1,5,2,4,3,4,3,1,4,1,1,3,2,5,4,1,4,3,1,5,2,2,3,4,5,5,2,4,2,4,3,4,2},{3,1,1,2,5,3,1,4,3,2,2,2,1,3,2,1,3,4,1,1,5,1,5,5,1,2,5,4,1,3,1,4,2,5,1,4,5,1,3,4,2,3,4,3,4,2,5,4,4,2},{1,1,3,4,3,2,4,3,4,2,4,5,5,4,3,5,1,1,3,1,4,5,3,1,4,2,5,5,4,5,3,2,2,5,4,4,2,2,4,1,4,1,1,3,3,4,4,5,4,5},{1,3,1,3,1,3,3,2,1,4,1,3,1,2,3,5,2,2,2,4,1,4,1,2,5,1,5,2,4,5,1,1,2,1,2,4,2,2,5,4,3,4,3,5,4,1,1,5,5,4},{3,3,1,4,5,5,1,3,3,5,4,5,3,2,3,4,3,3,4,2,2,5,5,2,5,1,5,5,4,2,5,1,2,4,5,2,4,1,4,4,5,3,1,5,1,2,4,1,2,4},{4,2,5,4,4,5,3,5,5,3,5,2,2,5,3,2,1,2,5,4,5,1,2,1,5,5,5,2,1,3,2,2,4,2,3,1,5,3,5,2,3,5,3,5,3,1,4,4,4,4},{5,1,4,1,3,5,4,4,1,4,4,5,2,1,4,2,2,1,5,4,1,5,1,1,5,2,3,4,2,2,3,3,2,1,3,4,4,2,2,1,1,5,5,5,3,4,3,2,1,4},{3,1,4,4,5,3,4,3,1,3,1,5,4,1,2,5,5,5,3,2,5,3,5,3,4,3,5,1,5,2,3,5,1,4,5,1,5,3,1,4,5,1,3,5,2,2,4,3,4,1},{1,2,4,5,1,1,3,3,4,1,2,4,1,1,5,1,5,1,1,1,3,1,4,1,2,4,2,5,3,4,1,2,3,3,4,5,5,3,3,1,1,1,3,1,3,5,4,3,5,2},{4,4,2,3,1,3,1,1,5,2,5,2,2,3,4,3,4,5,1,5,5,3,2,5,3,4,5,3,3,5,4,1,1,4,3,2,4,5,1,3,3,2,3,5,4,1,4,5,3,5},{2,5,2,1,1,2,1,5,3,3,4,1,2,1,1,3,4,2,3,4,2,4,3,4,1,3,1,3,3,3,1,2,4,5,2,1,2,5,3,5,2,3,2,4,4,4,1,2,1,2},{3,5,5,1,3,1,3,3,4,1,1,2,4,5,4,4,1,4,5,3,1,4,2,3,5,3,2,3,5,1,1,3,3,5,2,3,2,1,5,4,5,1,2,4,5,5,1,2,3,2},{2,1,1,3,1,4,4,5,3,2,4,3,2,4,2,5,5,5,1,5,5,5,5,4,4,4,3,4,2,5,1,3,4,5,3,5,1,5,1,2,3,5,5,5,1,4,4,3,2,2},{2,5,2,1,2,3,5,3,2,5,5,2,3,2,2,2,4,1,4,2,5,2,1,2,5,5,4,2,5,3,2,5,1,4,3,4,2,2,4,3,4,2,3,3,2,1,4,5,4,1},{5,2,2,3,5,1,3,5,2,1,1,5,3,5,2,1,2,2,1,2,5,3,1,1,1,4,4,4,4,4,2,4,2,4,5,1,3,5,2,3,2,1,1,5,3,4,4,5,2,4},{3,2,5,1,4,3,4,5,1,1,2,4,4,1,1,1,1,5,1,3,4,4,4,5,4,1,1,2,4,3,3,3,1,5,5,2,1,2,5,5,4,1,2,1,4,4,3,5,4,4},{5,3,5,3,4,3,4,2,5,5,1,4,4,4,2,3,4,5,1,1,3,1,2,4,4,1,1,4,5,4,2,2,5,1,5,5,4,4,3,2,3,4,2,5,5,2,4,5,1,3},{2,5,4,3,4,2,3,2,2,4,2,1,2,1,2,4,2,2,4,3,3,2,1,2,5,4,2,4,2,3,4,2,5,2,5,2,1,3,3,4,2,2,1,2,2,3,1,3,3,3},{3,3,3,4,4,4,4,2,5,5,5,5,1,4,1,4,4,4,5,4,2,4,1,3,3,1,4,2,3,5,1,5,3,5,4,4,3,4,5,2,3,2,4,2,4,5,3,3,5,5},{2,5,4,5,2,3,1,1,2,1,3,2,5,5,2,4,2,3,1,4,5,5,1,5,1,4,1,2,3,2,2,3,2,2,1,5,1,1,4,2,4,2,4,4,2,3,4,1,5,2},{1,2,5,2,5,3,4,3,1,4,2,5,5,5,4,5,5,4,3,5,3,1,2,4,1,4,3,2,5,3,2,5,2,4,4,5,1,3,3,3,1,2,2,5,5,1,3,2,3,1},{3,3,5,5,4,2,2,3,2,4,3,1,1,1,2,4,2,4,3,4,1,4,2,3,3,5,5,5,5,5,1,1,3,4,3,2,3,2,3,3,4,1,4,1,1,5,5,3,2,2},{2,1,4,4,3,1,4,1,4,5,2,1,1,5,5,4,1,2,1,3,3,5,1,5,3,2,2,4,3,5,5,3,4,1,5,1,5,4,4,4,3,3,5,1,4,4,1,3,3,5},{5,5,5,2,1,4,5,2,1,3,2,3,4,2,2,5,4,1,4,3,3,5,4,3,3,4,3,4,2,4,1,3,2,4,4,1,5,4,1,1,2,1,4,2,2,5,2,3,5,1},{2,2,3,2,5,2,5,5,2,2,2,3,3,5,4,1,5,3,4,2,5,1,2,1,1,5,2,2,1,3,1,1,3,5,5,3,5,1,5,3,5,4,5,1,2,1,1,5,1,5},{1,2,4,1,3,3,2,5,1,3,4,4,1,5,4,5,1,3,3,3,3,2,2,5,4,3,1,2,5,1,2,2,3,4,1,1,4,1,3,2,4,4,1,3,1,3,3,2,4,5}});
    Solution o;
    vector<vector<int>> res = o.candyCrush(board);
    /*const int m = board.size(), n = board[0].size();
    for (int i = 0; i < m; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            cout << res[i][j] << " ";
        }
        cout << "\n";
    }*/
    
    return 0;
}