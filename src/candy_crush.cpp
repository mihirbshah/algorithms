// 723. Candy Crush

#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

class Solution 
{
public:
    vector<vector<int>> candyCrush(vector<vector<int>>& board) 
    {
        cout << "Calling candyCrush\n";
        const int m = board.size(), n = board[0].size();

        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                cout << board[i][j] << "\t";
            }
            cout << "\n";
        }

        unordered_map<int, pair<int, int>> rmap, cmap;
        
        for (int i = 0; i < m; ++i)
        {
            for (int j = 0; j < n - 1; )
            {
                int st = j;
                
                while (board[i][j] && j < n - 1 && board[i][j] == board[i][j + 1]) ++j;
                if (j - st >= 2)
                {
                    cout << "row: " << i << ", range: [" << st << ", " << j << "]\n";
                    rmap[i] = {st, j};
                    break;
                }
                st = ++j;
            }
        }
        
        for (int j = 0; j < n; ++j)
        {
            for (int i = 0; i < m - 1; )
            {
                int st = i;
                while (board[i][j] && i < m - 1 && board[i][j] == board[i + 1][j]) ++i;
                if (i - st >= 2)
                {
                    cout << "col: " << j << ", range: [" << st << ", " << i << "]\n";
                    cmap[j] = {st, i};
                    break;
                }
                st = ++i;
            }
        }

        if (!rmap.size() && !cmap.size()) return board;
        
        for (int col = 0; col < n; ++col)
        {
            if (!cmap.count(col)) continue;
            auto range = cmap[col];
            const int diff = range.second - range.first + 1;
            for (int k = range.first - 1; k >= 0; --k) board[k + diff][col] = board[k][col];
            for (int k = 0; k < diff; ++k) board[k][col] = 0;
        }
        
        for (int row = 0; row < m; ++row)
        {
            if (!rmap.count(row)) continue;
                auto range = rmap[row];
            for (int k = range.first; k <= range.second; ++k)
            {
                if (cmap.count(k) && row >= cmap[k].first && row <= cmap[k].second) continue;
                for (int r = row; r > 0; --r) board[r][k] = board[r - 1][k];
                board[0][k] = 0;
            }
        }
        
        return candyCrush(board);
    }
};

int main()
{
    //vector<vector<int>> board({{110,5,112,113,114},{210,211,5,213,214},{310,311,3,313,314},{410,411,412,5,414},{5,1,512,3,3},{610,4,1,613,614},{710,1,2,713,714},{810,1,2,1,1},{1,1,2,2,2},{4,1,4,4,1014}});
    
    vector<vector<int>> board({{1,4,3,5,4,4,1,2,1,4,5,2,5,2,2,2,1,1,5,2,1,3,1,4,2,5,4,5,3,5,3,4,5,3,5,1,1,3,5,3,5,2,1,2,2,3,5,5,2,3},{1,3,4,3,1,2,1,1,3,4,3,3,3,1,2,1,3,2,2,4,2,1,4,1,3,4,3,1,4,2,2,2,3,5,3,2,3,5,3,2,4,2,4,3,1,1,1,3,2,5},{4,4,1,3,3,4,3,2,1,4,4,1,1,5,1,3,4,1,1,3,1,3,3,1,3,4,1,3,5,2,1,2,5,4,3,2,1,4,1,3,5,3,4,1,2,1,5,5,2,3},{4,1,5,5,3,3,2,5,2,3,1,1,5,3,4,5,5,2,4,2,2,2,1,2,2,2,5,4,4,2,4,2,1,5,3,2,5,4,5,5,5,1,2,4,5,3,4,4,3,5},{2,5,5,5,1,5,5,5,3,2,5,2,2,4,1,3,4,1,3,5,2,1,4,2,4,3,4,3,1,3,3,1,3,5,1,1,4,2,2,5,2,1,3,4,5,1,2,1,1,2},{4,2,4,3,2,4,4,4,5,3,1,1,2,4,1,1,4,5,5,4,4,3,4,5,5,3,3,5,1,2,2,1,4,2,3,1,2,1,1,2,3,4,3,4,4,5,2,3,4,2},{2,1,2,1,2,3,3,4,3,5,5,2,3,5,2,4,4,4,5,1,5,1,1,2,2,2,5,3,3,4,5,2,2,1,3,2,4,2,2,3,1,3,3,2,5,5,2,2,3,1},{1,4,2,5,3,5,4,1,3,5,2,2,1,4,3,2,5,2,5,4,5,3,3,5,2,3,2,4,3,2,3,1,3,5,1,5,5,1,1,4,1,2,1,3,5,3,2,4,3,1},{2,2,3,5,4,4,2,1,3,4,2,3,5,2,5,4,2,5,1,1,1,2,5,1,3,3,5,3,2,2,3,1,5,3,1,2,1,4,2,1,2,3,2,4,1,3,1,3,5,2},{3,5,1,5,3,2,3,3,3,5,2,1,4,5,4,4,4,2,4,1,4,1,2,5,1,5,3,4,3,5,5,2,4,3,1,5,3,4,3,3,3,5,5,2,3,4,1,5,2,5},{2,5,2,4,4,2,3,1,1,5,1,1,2,4,5,3,3,1,2,4,4,3,2,5,1,1,1,3,2,4,2,5,4,4,3,3,3,1,4,3,4,1,2,2,5,3,5,1,1,1},{4,5,1,3,1,3,1,3,2,1,3,3,5,5,5,3,2,3,1,2,4,4,1,3,4,2,3,4,4,3,5,4,3,1,1,2,4,1,2,4,2,4,4,4,1,5,4,2,2,4},{2,4,5,2,4,2,3,5,4,1,5,5,4,4,4,4,3,4,3,4,2,3,5,2,4,2,2,4,5,2,3,4,5,5,3,2,1,4,1,4,1,4,5,4,4,2,5,5,3,1},{2,3,5,2,3,5,3,5,3,2,1,5,3,5,5,5,1,2,1,2,4,3,3,3,1,3,4,2,5,4,4,3,2,4,3,3,2,3,3,2,3,2,4,4,3,2,5,2,1,5},{1,4,4,5,5,4,4,5,5,1,4,2,1,3,1,1,2,2,3,3,2,4,5,3,1,3,4,3,5,5,1,2,2,3,3,3,1,5,3,5,2,1,4,4,1,3,1,5,2,3},{1,4,3,2,5,4,4,4,3,5,3,4,4,2,5,3,1,5,1,5,1,1,1,5,5,5,5,2,3,4,3,2,1,2,2,2,3,2,1,3,4,3,3,4,4,1,5,3,2,4},{5,5,1,2,4,5,2,2,5,1,5,4,4,5,3,4,3,4,5,3,4,1,3,3,3,4,4,1,4,3,4,1,3,2,1,1,3,3,2,2,3,1,3,4,4,1,5,3,4,3},{2,4,4,2,4,3,5,1,4,4,5,3,4,4,3,2,1,1,2,5,2,2,3,2,1,1,1,5,4,1,1,2,3,5,5,4,5,4,1,2,1,3,4,3,3,5,3,5,3,1},{3,5,1,5,5,4,4,3,3,2,5,2,2,2,4,1,5,4,4,5,5,3,4,2,2,5,2,4,4,3,2,5,4,5,3,2,4,2,2,5,1,1,5,2,1,1,4,1,1,3},{2,1,1,2,3,2,4,3,2,2,5,3,2,4,3,3,3,4,4,2,3,3,5,3,4,5,1,4,5,5,2,1,2,3,1,1,2,2,4,1,2,2,5,4,3,5,3,5,1,3},{5,4,1,3,3,3,5,5,5,5,2,4,3,2,1,3,5,5,3,5,2,3,3,5,3,3,4,1,2,1,4,5,2,2,3,3,4,1,4,1,1,1,5,5,4,5,2,3,3,5},{4,2,5,4,4,1,2,4,2,3,5,1,2,2,5,1,3,5,5,3,5,5,1,3,2,1,1,5,1,4,2,5,2,1,3,4,4,4,5,1,3,2,1,3,4,1,5,2,4,2},{3,5,4,3,1,1,3,2,3,2,1,2,1,5,1,2,3,1,4,4,5,5,5,3,5,4,5,2,3,5,2,5,3,1,1,4,2,5,2,2,5,3,1,3,1,4,1,5,1,5},{5,2,1,5,1,5,3,1,4,1,2,4,4,2,4,5,4,3,1,1,2,3,4,3,2,1,3,4,5,3,4,2,5,5,4,3,2,2,5,1,4,3,4,3,3,2,2,5,5,5},{1,3,2,5,2,2,1,3,3,2,5,3,5,4,4,3,2,1,5,2,4,3,4,3,1,4,1,1,3,2,5,4,1,4,3,1,5,2,2,3,4,5,5,2,4,2,4,3,4,2},{3,1,1,2,5,3,1,4,3,2,2,2,1,3,2,1,3,4,1,1,5,1,5,5,1,2,5,4,1,3,1,4,2,5,1,4,5,1,3,4,2,3,4,3,4,2,5,4,4,2},{1,1,3,4,3,2,4,3,4,2,4,5,5,4,3,5,1,1,3,1,4,5,3,1,4,2,5,5,4,5,3,2,2,5,4,4,2,2,4,1,4,1,1,3,3,4,4,5,4,5},{1,3,1,3,1,3,3,2,1,4,1,3,1,2,3,5,2,2,2,4,1,4,1,2,5,1,5,2,4,5,1,1,2,1,2,4,2,2,5,4,3,4,3,5,4,1,1,5,5,4},{3,3,1,4,5,5,1,3,3,5,4,5,3,2,3,4,3,3,4,2,2,5,5,2,5,1,5,5,4,2,5,1,2,4,5,2,4,1,4,4,5,3,1,5,1,2,4,1,2,4},{4,2,5,4,4,5,3,5,5,3,5,2,2,5,3,2,1,2,5,4,5,1,2,1,5,5,5,2,1,3,2,2,4,2,3,1,5,3,5,2,3,5,3,5,3,1,4,4,4,4},{5,1,4,1,3,5,4,4,1,4,4,5,2,1,4,2,2,1,5,4,1,5,1,1,5,2,3,4,2,2,3,3,2,1,3,4,4,2,2,1,1,5,5,5,3,4,3,2,1,4},{3,1,4,4,5,3,4,3,1,3,1,5,4,1,2,5,5,5,3,2,5,3,5,3,4,3,5,1,5,2,3,5,1,4,5,1,5,3,1,4,5,1,3,5,2,2,4,3,4,1},{1,2,4,5,1,1,3,3,4,1,2,4,1,1,5,1,5,1,1,1,3,1,4,1,2,4,2,5,3,4,1,2,3,3,4,5,5,3,3,1,1,1,3,1,3,5,4,3,5,2},{4,4,2,3,1,3,1,1,5,2,5,2,2,3,4,3,4,5,1,5,5,3,2,5,3,4,5,3,3,5,4,1,1,4,3,2,4,5,1,3,3,2,3,5,4,1,4,5,3,5},{2,5,2,1,1,2,1,5,3,3,4,1,2,1,1,3,4,2,3,4,2,4,3,4,1,3,1,3,3,3,1,2,4,5,2,1,2,5,3,5,2,3,2,4,4,4,1,2,1,2},{3,5,5,1,3,1,3,3,4,1,1,2,4,5,4,4,1,4,5,3,1,4,2,3,5,3,2,3,5,1,1,3,3,5,2,3,2,1,5,4,5,1,2,4,5,5,1,2,3,2},{2,1,1,3,1,4,4,5,3,2,4,3,2,4,2,5,5,5,1,5,5,5,5,4,4,4,3,4,2,5,1,3,4,5,3,5,1,5,1,2,3,5,5,5,1,4,4,3,2,2},{2,5,2,1,2,3,5,3,2,5,5,2,3,2,2,2,4,1,4,2,5,2,1,2,5,5,4,2,5,3,2,5,1,4,3,4,2,2,4,3,4,2,3,3,2,1,4,5,4,1},{5,2,2,3,5,1,3,5,2,1,1,5,3,5,2,1,2,2,1,2,5,3,1,1,1,4,4,4,4,4,2,4,2,4,5,1,3,5,2,3,2,1,1,5,3,4,4,5,2,4},{3,2,5,1,4,3,4,5,1,1,2,4,4,1,1,1,1,5,1,3,4,4,4,5,4,1,1,2,4,3,3,3,1,5,5,2,1,2,5,5,4,1,2,1,4,4,3,5,4,4},{5,3,5,3,4,3,4,2,5,5,1,4,4,4,2,3,4,5,1,1,3,1,2,4,4,1,1,4,5,4,2,2,5,1,5,5,4,4,3,2,3,4,2,5,5,2,4,5,1,3},{2,5,4,3,4,2,3,2,2,4,2,1,2,1,2,4,2,2,4,3,3,2,1,2,5,4,2,4,2,3,4,2,5,2,5,2,1,3,3,4,2,2,1,2,2,3,1,3,3,3},{3,3,3,4,4,4,4,2,5,5,5,5,1,4,1,4,4,4,5,4,2,4,1,3,3,1,4,2,3,5,1,5,3,5,4,4,3,4,5,2,3,2,4,2,4,5,3,3,5,5},{2,5,4,5,2,3,1,1,2,1,3,2,5,5,2,4,2,3,1,4,5,5,1,5,1,4,1,2,3,2,2,3,2,2,1,5,1,1,4,2,4,2,4,4,2,3,4,1,5,2},{1,2,5,2,5,3,4,3,1,4,2,5,5,5,4,5,5,4,3,5,3,1,2,4,1,4,3,2,5,3,2,5,2,4,4,5,1,3,3,3,1,2,2,5,5,1,3,2,3,1},{3,3,5,5,4,2,2,3,2,4,3,1,1,1,2,4,2,4,3,4,1,4,2,3,3,5,5,5,5,5,1,1,3,4,3,2,3,2,3,3,4,1,4,1,1,5,5,3,2,2},{2,1,4,4,3,1,4,1,4,5,2,1,1,5,5,4,1,2,1,3,3,5,1,5,3,2,2,4,3,5,5,3,4,1,5,1,5,4,4,4,3,3,5,1,4,4,1,3,3,5},{5,5,5,2,1,4,5,2,1,3,2,3,4,2,2,5,4,1,4,3,3,5,4,3,3,4,3,4,2,4,1,3,2,4,4,1,5,4,1,1,2,1,4,2,2,5,2,3,5,1},{2,2,3,2,5,2,5,5,2,2,2,3,3,5,4,1,5,3,4,2,5,1,2,1,1,5,2,2,1,3,1,1,3,5,5,3,5,1,5,3,5,4,5,1,2,1,1,5,1,5},{1,2,4,1,3,3,2,5,1,3,4,4,1,5,4,5,1,3,3,3,3,2,2,5,4,3,1,2,5,1,2,2,3,4,1,1,4,1,3,2,4,4,1,3,1,3,3,2,4,5}});
    Solution o;
    vector<vector<int>> res = o.candyCrush(board);
    const int m = board.size(), n = board[0].size();
    for (int i = 0; i < m; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            cout << res[i][j] << " ";
        }
        cout << "\n";
    }
    
    return 0;
}